
package /* Other comment style
 */proto.test.nullables;

//This class is documented here:
//With multiple lines
//:namespace = Mine.Nullables // Default from .proto: proto.test
//:preserveunknown
message my_message_v1
{
    //This field is important to comment as we just did here
    required int32 field_a = 1;
}

//:namespace = Yours.Nullables // Default from .proto: proto.test
message my_message_v2
{
    required int32 field_a = 1 [default = -1];
    required double field_b = 2 [default = 4.5];
    required float field_c = 3 [default = 5.4];
    required int32 field_d = 4 [default = -2];
    required int64 field_e = 5 [default = -3];
    required uint32 field_f = 6 [default = 4];
    required uint64 field_g = 7 [default = 5];
    required sint32 field_h = 8 [default = -6];
    required sint64 field_i = 9 [default = -7];
    required fixed32 field_j = 10 [default = 8];
    required fixed64 field_k = 11 [default = 9];
    required sfixed32 field_l = 12 [default = -10];
    required sfixed64 field_m = 13 [default = -11];
    required bool field_n = 14 [default = false];
    required string field_o = 15 [default = "test"];
    required bytes field_p = 16;

    enum my_enum
    {
        //First test
        ETest1 = 0;
        //Second test
        ETest2 = 3;
        ETest3 = 2;
    }
    
    enum aliased_enum
    {
        option allow_alias = true;
        Nothing = 0;
        Zero = 0;
        Nada = 0;
        Some = 1;
        ALot = 2;
    }

    required my_enum field_q = 17;
    optional my_enum field_r = 18 [default = ETest2];
    
    //:access = protected  //public, internal, protected or private
    optional string dummy = 19 [deprecated=true];
    
    repeated fixed32 field_t = 20 [packed=true];
    repeated uint32 field_s = 21;
    
    optional their_message field_u = 22;
    
    repeated their_message field_v = 23;

    optional int32 nullable_int = 24;

    optional aliased_enum nullable_enum = 25;
}

//:namespace = Theirs.Nullables // Default from .proto: proto.test
message their_message
{
    required int32 field_a = 1;
}

//Message without any low id(< 16) fields
message longMessage
{
    required int32 field_x1 = 32;
    required int32 field_x2 = 64;
    required int32 field_x3 = 96;
    required int32 field_x4 = 100;
}

//Nested testing
message Data {
    optional double somefield = 1;
}

message Container {
    message Nested {
        optional Data nestedData = 1;
    }

    optional Nested myNestedMessage = 1;
    
    //Name collision test
    optional Nested Nested = 2;
}

//Options
//import "google/protobuf/descriptor.proto";

extend google.protobuf.FileOptions {
  optional string my_file_option = 50000;
}
extend google.protobuf.MessageOptions {
  optional int32 my_message_option = 50001;
}
extend google.protobuf.FieldOptions {
  optional float my_field_option = 50002;
}
extend google.protobuf.EnumOptions {
  optional bool my_enum_option = 50003;
}
extend google.protobuf.EnumValueOptions {
  optional uint32 my_enum_value_option = 50004;
}
extend google.protobuf.ServiceOptions {
  optional MyEnum my_service_option = 50005;
}
extend google.protobuf.MethodOptions {
  optional MyMessage my_method_option = 50006;
}

option (my_file_option) = "Hello world!";

message MyMessage {
  option (my_message_option) = 1234;

  optional int32 foo = 1 [(my_field_option) = 4.5];
  optional string bar = 2;
}

enum MyEnum {
  option (my_enum_option) = true;

  FOO = 1 [(my_enum_value_option) = 321];
  BAR = 2;
}
